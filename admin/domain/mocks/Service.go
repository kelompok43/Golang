// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kelompok43/Golang/admin/domain"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: id, _a1
func (_m *Service) ChangePassword(id int, _a1 domain.Admin) (domain.Admin, error) {
	ret := _m.Called(id, _a1)

	var r0 domain.Admin
	if rf, ok := ret.Get(0).(func(int, domain.Admin) domain.Admin); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Get(0).(domain.Admin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Admin) error); ok {
		r1 = rf(id, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: email, password
func (_m *Service) CreateToken(email string, password string) (string, domain.Admin, error) {
	ret := _m.Called(email, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 domain.Admin
	if rf, ok := ret.Get(1).(func(string, string) domain.Admin); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(domain.Admin)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteData provides a mock function with given fields: id
func (_m *Service) DeleteData(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllData provides a mock function with given fields:
func (_m *Service) GetAllData() ([]domain.Admin, error) {
	ret := _m.Called()

	var r0 []domain.Admin
	if rf, ok := ret.Get(0).(func() []domain.Admin); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: email
func (_m *Service) GetByEmail(email string) (domain.Admin, error) {
	ret := _m.Called(email)

	var r0 domain.Admin
	if rf, ok := ret.Get(0).(func(string) domain.Admin); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(domain.Admin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Service) GetByID(id int) (domain.Admin, error) {
	ret := _m.Called(id)

	var r0 domain.Admin
	if rf, ok := ret.Get(0).(func(int) domain.Admin); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Admin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertData provides a mock function with given fields: _a0
func (_m *Service) InsertData(_a0 domain.Admin) (domain.Admin, error) {
	ret := _m.Called(_a0)

	var r0 domain.Admin
	if rf, ok := ret.Get(0).(func(domain.Admin) domain.Admin); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Admin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Admin) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateData provides a mock function with given fields: id, _a1
func (_m *Service) UpdateData(id int, _a1 domain.Admin) (domain.Admin, error) {
	ret := _m.Called(id, _a1)

	var r0 domain.Admin
	if rf, ok := ret.Get(0).(func(int, domain.Admin) domain.Admin); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Get(0).(domain.Admin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Admin) error); ok {
		r1 = rf(id, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
